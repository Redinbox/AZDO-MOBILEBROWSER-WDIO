# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: macOS-11

variables:
  scheme: 'mytest'
  sdk: 'iphoneos'
  configuration: 'Debug'
steps:
- task: NodeTool@0
  inputs:
    versionSpec: "16"
- script: ls /Applications
  displayName: List Apps
- script: sudo xcode-select --switch "/Applications/Xcode_12.3.app/Contents/Developer"
  displayName: Prepare Env
- script: xcrun simctl list
  displayName: List Simulators
- script: npm install
  displayName: Install Package From NPM
- script: |
    npm run testiOS
  continueOnError: true
  displayName: 'Run ios mobile tests'
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: 'test-results.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/output'
    testRunTitle: 'WDIO Test results'
    failTaskOnFailedTests: true
  continueOnError: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $AzureDevOpsPAT = '$(System.AccessToken)'
      echo 'PAT /n'+$AzureDevOpsPAT
      $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($AzureDevOpsPAT)")) }
      echo 'header /n ' $AzureDevOpsAuthenicationHeader
      $UriOrga = "https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/"
      $uriAccount = $UriOrga + "_apis/test/runs?api-version=6.0"
      $response = Invoke-RestMethod -Uri $uriAccount -Headers $AzureDevOpsAuthenicationHeader -Method Get
      echo 'resonse value/n'+ $response.value
      $testRunsIdSorted = $response.value | sort-object id -Descending
      echo 'test runs id sorted /n'+ $testRunsIdSorted
      echo 'test runs id sorted /n'+ $testRunsIdSorted[0].id
      $result = Invoke-RestMethod -Uri https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/runs/$($testRunsIdSorted[0].id)?api-version=6.0 -Headers $AzureDevOpsAuthenicationHeader -Method Get
      Write-Host "results = $($result | ConvertTo-Json -Depth 100)"
      Write-Host "##vso[task.setvariable variable=runId]$($result.id | ConvertTo-Json -Depth 100)"
      echo 'results value/n'+$result.value
  continueOnError: true
  displayName: Get Test Run ID
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $AzureDevOpsPAT = '$(System.AccessToken)'
      $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($AzureDevOpsPAT)")) }
      $result = Invoke-RestMethod -Uri https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/runs/$(runId)/results?api-version=6.0 -Headers $AzureDevOpsAuthenicationHeader -Method Get

      #List all test result  get the test result ID via result
      foreach($Run in $result.value){

      #Get the test result ID via result
      If($Run.outcome -eq "Failed"){
      $TestResultID = $Run.id
      $TestTitle=$Run.testCase.name
      $TestName =$TestTitle
      echo 'testname/n'+$TestName

      $file= [IO.File]::ReadAllBytes("$(System.DefaultWorkingDirectory)/jscreenshots/TESTFAIL.png")
      $Base64file= [Convert]::ToBase64String($file)

      #Add attachment via test run ID and test result ID
      $TestResultAttachmentURL = "https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/Runs/$(runId)/results/$($TestResultID)/attachments?api-version=6.0-preview.1"
      echo '$TestResultAttachmentURL/n'+$TestResultAttachmentURL
      $body =@"
      {
        "stream": "$Base64file",
        "fileName": "TESTFAIL.png",
        "comment": "Test attachment upload",
        "attachmentType": "GeneralAttachment"
      }
      "@
      $TestResultAttachmentResult = Invoke-RestMethod -Uri $TestResultAttachmentURL -ContentType "application/json" -Body $body -Headers $AzureDevOpsAuthenicationHeader -Method POST
      echo 'final out/n' + $TestResultAttachmentResult
      }
      }
  displayName: Attaching sreenshots
